<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.young.mapper.StaffMapper">
  <resultMap id="BaseResultMap" type="com.young.model.Staff">
    <id column="ID" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="sex" jdbcType="CHAR" property="sex" />
    <result column="age" jdbcType="INTEGER" property="age" />
    <result column="birthday" jdbcType="VARCHAR" property="birthday" />
    <result column="mobile" jdbcType="VARCHAR" property="mobile" />
    <result column="entry_time" jdbcType="VARCHAR" property="entryTime" />
    <result column="salary" jdbcType="DECIMAL" property="salary" />
    <result column="level" jdbcType="INTEGER" property="level" />
    <result column="holidays" jdbcType="INTEGER" property="holidays" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="back1" jdbcType="DECIMAL" property="back1" />
    <result column="back2" jdbcType="VARCHAR" property="back2" />
    <result column="back3" jdbcType="VARCHAR" property="back3" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="password" jdbcType="VARCHAR" property="password" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    ID, name, sex, age, birthday, mobile, entry_time, salary, level, holidays, status, 
    back1, back2, back3, user_name, password
  </sql>
  <select id="selectByExample" parameterType="com.young.model.StaffExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from staff
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from staff
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from staff
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.young.model.Staff">
    insert into staff (ID, name, sex, age, 
      birthday, mobile, entry_time, 
      salary, level, holidays, 
      status, back1, back2, 
      back3, user_name, password
      )
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{sex,jdbcType=CHAR}, #{age,jdbcType=INTEGER}, 
      #{birthday,jdbcType=VARCHAR}, #{mobile,jdbcType=VARCHAR}, #{entryTime,jdbcType=VARCHAR}, 
      #{salary,jdbcType=DECIMAL}, #{level,jdbcType=INTEGER}, #{holidays,jdbcType=INTEGER}, 
      #{status,jdbcType=INTEGER}, #{back1,jdbcType=DECIMAL}, #{back2,jdbcType=VARCHAR}, 
      #{back3,jdbcType=VARCHAR}, #{userName,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.young.model.Staff">
    insert into staff
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        ID,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="age != null">
        age,
      </if>
      <if test="birthday != null">
        birthday,
      </if>
      <if test="mobile != null">
        mobile,
      </if>
      <if test="entryTime != null">
        entry_time,
      </if>
      <if test="salary != null">
        salary,
      </if>
      <if test="level != null">
        level,
      </if>
      <if test="holidays != null">
        holidays,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="back1 != null">
        back1,
      </if>
      <if test="back2 != null">
        back2,
      </if>
      <if test="back3 != null">
        back3,
      </if>
      <if test="userName != null">
        user_name,
      </if>
      <if test="password != null">
        password,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=CHAR},
      </if>
      <if test="age != null">
        #{age,jdbcType=INTEGER},
      </if>
      <if test="birthday != null">
        #{birthday,jdbcType=VARCHAR},
      </if>
      <if test="mobile != null">
        #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="entryTime != null">
        #{entryTime,jdbcType=VARCHAR},
      </if>
      <if test="salary != null">
        #{salary,jdbcType=DECIMAL},
      </if>
      <if test="level != null">
        #{level,jdbcType=INTEGER},
      </if>
      <if test="holidays != null">
        #{holidays,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="back1 != null">
        #{back1,jdbcType=DECIMAL},
      </if>
      <if test="back2 != null">
        #{back2,jdbcType=VARCHAR},
      </if>
      <if test="back3 != null">
        #{back3,jdbcType=VARCHAR},
      </if>
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.young.model.StaffExample" resultType="java.lang.Long">
    select count(*) from staff
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByPrimaryKeySelective" parameterType="com.young.model.Staff">
    update staff
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=CHAR},
      </if>
      <if test="age != null">
        age = #{age,jdbcType=INTEGER},
      </if>
      <if test="birthday != null">
        birthday = #{birthday,jdbcType=VARCHAR},
      </if>
      <if test="mobile != null">
        mobile = #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="entryTime != null">
        entry_time = #{entryTime,jdbcType=VARCHAR},
      </if>
      <if test="salary != null">
        salary = #{salary,jdbcType=DECIMAL},
      </if>
      <if test="level != null">
        level = #{level,jdbcType=INTEGER},
      </if>
      <if test="holidays != null">
        holidays = #{holidays,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="back1 != null">
        back1 = #{back1,jdbcType=DECIMAL},
      </if>
      <if test="back2 != null">
        back2 = #{back2,jdbcType=VARCHAR},
      </if>
      <if test="back3 != null">
        back3 = #{back3,jdbcType=VARCHAR},
      </if>
      <if test="userName != null">
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.young.model.Staff">
    update staff
    set name = #{name,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=CHAR},
      age = #{age,jdbcType=INTEGER},
      birthday = #{birthday,jdbcType=VARCHAR},
      mobile = #{mobile,jdbcType=VARCHAR},
      entry_time = #{entryTime,jdbcType=VARCHAR},
      salary = #{salary,jdbcType=DECIMAL},
      level = #{level,jdbcType=INTEGER},
      holidays = #{holidays,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      back1 = #{back1,jdbcType=DECIMAL},
      back2 = #{back2,jdbcType=VARCHAR},
      back3 = #{back3,jdbcType=VARCHAR},
      user_name = #{userName,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR}
    where ID = #{id,jdbcType=INTEGER}
  </update>
</mapper>